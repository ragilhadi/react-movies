{"version":3,"sources":["components/header/TopNav.js","components/pageHeader/PageTittle.js","Api/moviedb.js","components/imageSlider/ImageSlide.js","components/itemCard/ItemCard.js","components/gridCard/GridCard.js","components/buttonIcon/ButtonIcon.js","components/containerMovie/ContainerMovies.js","View/Home/Home.js","View/Movie/Movie.js","View/NotFound/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Header","Layout","TopNav","style","position","zIndex","width","padding","theme","mode","defaultSelectedKeys","Item","key","to","HomeOutlined","justifyContent","placeholder","PageTittle","props","className","title","tittle","subTitle","subtittle","API_URL","API_KEY","ImageSlide","autoplay","data","map","datas","id","src","backdrop_path","alt","Meta","Card","ItemCard","clickable","pathname","movieId","movieName","hoverable","cover","poster","description","score","GridCard","gutter","lg","md","xs","poster_path","original_title","vote_average","ButtonIcon","orientation","type","icon","RightOutlined","name","ContainerMovies","button","Home","state","movies","nowPlaying","upComing","popular","topRated","currentPage","totalPage","searchTerm","fetchDataNowPlaying","respone","fetch","then","result","json","setState","results","slice","fetchDataPopular","fetchDataUpcoming","fetchDataTopRated","PopularMovie","NowPlayingMovie","UpComingMovie","TopRated","this","margin","Component","Movie","NotFound","status","extra","App","Fragment","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4c35b38c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./TopNav.scss\";\r\nimport { Layout, Menu, AutoComplete, Input } from \"antd\";\r\nimport { HomeOutlined } from \"@ant-design/icons\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst { Header } = Layout;\r\n\r\nconst TopNav = () => {\r\n  return (\r\n    <Layout>\r\n      <Header\r\n        style={{\r\n          position: \"fixed\",\r\n          zIndex: 1,\r\n          width: \"100%\",\r\n          padding: \"0 150px\",\r\n        }}\r\n      >\r\n        {/* <div className=\"logo\">\r\n        </div> */}\r\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={[\"1\"]}>\r\n          <Menu.Item key=\"1\">\r\n            <Link to=\"/\">\r\n              <HomeOutlined />\r\n              Home\r\n            </Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"2\">\r\n            <AutoComplete\r\n              // options={options}\r\n              style={{\r\n                width: 200,\r\n                justifyContent: 'flex-end'\r\n              }}\r\n              // onSelect={onSelect}\r\n              // onSearch={onSearch}\r\n              placeholder=\"Search...\"\r\n            />\r\n          </Menu.Item>\r\n          <Menu.Item key=\"3\">\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Header>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default TopNav;\r\n","import React from 'react'\r\nimport { PageHeader } from \"antd\";\r\nimport './PageTittle.scss'\r\n\r\nconst PageTittle = (props) => {\r\n    return (\r\n        <div className='container'>\r\n        <PageHeader\r\n            className=\"site-page-header\"\r\n            title={props.tittle}\r\n            subTitle={props.subtittle}\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageTittle\r\n","const API_URL = 'https://api.themoviedb.org/3'\r\nconst API_KEY = '8331c0e63f02372a473a46db041c13db'\r\n\r\nconst IMAGE_BASE_URL = 'https://image.tmdb.org/t/p/'\r\nconst POSTER_SIZE = 'original'\r\n\r\nexport {\r\n    API_URL,\r\n    API_KEY,\r\n    IMAGE_BASE_URL,\r\n    POSTER_SIZE\r\n}","import React from \"react\";\r\nimport { Carousel } from \"antd\";\r\nimport 'antd/dist/antd.css';\r\nimport './ImageSlide.scss'\r\nimport { POSTER_SIZE, IMAGE_BASE_URL } from \"../../Api/moviedb\";\r\n\r\nconst ImageSlide = (props) => {\r\n  return (\r\n    <div className='container'> \r\n    <Carousel \r\n      autoplay\r\n    >\r\n        {props.data.map(datas => (\r\n          <img \r\n            className='img_darker'\r\n            key = {datas.id}\r\n            src = {`${IMAGE_BASE_URL}${POSTER_SIZE}${datas.backdrop_path}`}\r\n            alt = 'IMAGES'\r\n          />\r\n        ))}\r\n         <h1>{props.data.title}</h1>\r\n    </Carousel>\r\n    </div>  \r\n  )\r\n};\r\n\r\nexport default ImageSlide;\r\n","import React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Card } from \"antd\";\r\nimport { POSTER_SIZE, IMAGE_BASE_URL } from \"../../Api/moviedb\"\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst { Meta } = Card;\r\n\r\nconst ItemCard = (props) => {\r\n  return (\r\n    <div>\r\n    {props.clickable ? \r\n      <Link to={{pathname: `/${props.movieId}`, movieName: `${props.movieName}`}}>\r\n    <Card\r\n      hoverable\r\n      style={{ width: 240 }}\r\n      cover={\r\n        <img\r\n          alt=\"example\"\r\n          src={`${IMAGE_BASE_URL}${POSTER_SIZE}${props.poster}`}\r\n        />\r\n      }\r\n    >\r\n      <Meta title={props.tittle} description={props.score} />\r\n    </Card>\r\n    </Link>\r\n    :\r\n    <Card\r\n      hoverable\r\n      style={{ width: 240 }}\r\n      cover={\r\n        <img\r\n          alt=\"example\"\r\n          src={`${IMAGE_BASE_URL}${POSTER_SIZE}${props.poster}`}\r\n        />\r\n      }\r\n    >\r\n      <Meta title={props.tittle} description={props.score} />\r\n    </Card>\r\n    }\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default ItemCard;\r\n","import React from 'react'\r\nimport { Col, Row } from 'antd'\r\nimport ItemCard from '../itemCard/ItemCard'\r\n\r\nconst GridCard = props => {\r\n    return (\r\n        <Row gutter={[32, 32]}>\r\n            {props.data.map(datas => (\r\n                <Col lg={6} md={8} xs={24}>\r\n                    <ItemCard \r\n                        poster={datas.poster_path}\r\n                        tittle={datas.original_title}\r\n                        score={datas.vote_average}\r\n                    />         \r\n            </Col>\r\n            ))}\r\n        </Row>\r\n    )\r\n}\r\n\r\n\r\nexport default GridCard\r\n","import React from \"react\";\r\nimport { Button, Divider } from 'antd';\r\nimport { RightOutlined } from '@ant-design/icons';\r\n\r\nconst ButtonIcon = (props) => {\r\n  return (\r\n    <>\r\n        <Divider orientation=\"right\">\r\n            <Button type=\"primary\" icon={<RightOutlined />} >\r\n            {props.name}\r\n            </Button>\r\n        </Divider>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ButtonIcon;\r\n","import React from 'react'\r\nimport { PageHeader, Divider } from 'antd'\r\nimport GridCard from '../gridCard/GridCard'\r\nimport ButtonIcon from '../buttonIcon/ButtonIcon'\r\n\r\nconst ContainerMovies = props => {\r\n    return (\r\n        <div>\r\n            <PageHeader \r\n                title={props.tittle}\r\n                subTitle={props.subtittle}\r\n            />\r\n            <GridCard \r\n                data={props.data}\r\n            />\r\n            <ButtonIcon \r\n                name={props.button}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ContainerMovies\r\n","import React, {Component} from 'react'\r\nimport PageTittle from '../../components/pageHeader/PageTittle';\r\nimport ImageSlide from '../../components/imageSlider/ImageSlide';\r\nimport ContainerMovies from '../../components/containerMovie/ContainerMovies'\r\nimport { API_URL, API_KEY } from '../../Api/moviedb';\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    movies: [],\r\n    nowPlaying: [],\r\n    upComing: [],\r\n    popular: [],\r\n    topRated: [],\r\n    currentPage: 0,\r\n    totalPage: 0,\r\n    searchTerm: '',\r\n  }\r\n\r\n  componentDidMount(){\r\n    const PopularMovie = `${API_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=1`\r\n    const NowPlayingMovie = `${API_URL}/movie/now_playing?api_key=${API_KEY}&language=en-US&page=1`\r\n    const UpComingMovie = `${API_URL}/movie/upcoming?api_key=${API_KEY}&language=en-US&page=1`\r\n    const TopRated = `${API_URL}/movie/top_rated?api_key=${API_KEY}&language=en-US&page=1`\r\n    this.fetchDataNowPlaying(NowPlayingMovie)\r\n    this.fetchDataPopular(PopularMovie)\r\n    this.fetchDataUpcoming(UpComingMovie)\r\n    this.fetchDataTopRated(TopRated)\r\n  }\r\n\r\n  fetchDataNowPlaying = (respone) => {\r\n    fetch(respone)\r\n    .then(result => result.json())\r\n    .then(result => {\r\n      this.setState({\r\n        nowPlaying: [...this.state.nowPlaying, ...result.results.slice(0,6)]\r\n      })\r\n    })\r\n  }\r\n\r\n  fetchDataPopular = (respone) => {\r\n    fetch(respone)\r\n    .then(result => result.json())\r\n    .then(result => {\r\n      this.setState({\r\n        popular: [...this.state.popular, ...result.results.slice(0,8)]\r\n      })\r\n    })\r\n  }\r\n\r\n  fetchDataUpcoming = (respone) => {\r\n    fetch(respone)\r\n    .then(result => result.json())\r\n    .then(result => {\r\n      this.setState({\r\n        upComing: [...this.state.upComing, ...result.results.slice(0,8)]\r\n      })\r\n    })\r\n  }\r\n\r\n  fetchDataTopRated = (respone) => {\r\n    fetch(respone)\r\n    .then(result => result.json())\r\n    .then(result => {\r\n      this.setState({\r\n        topRated: [...this.state.topRated, ...result.results.slice(0,8)]\r\n      })\r\n    })\r\n  }\r\n  render(){\r\n    return (\r\n        <div style={{ margin: '0 150px'}}>\r\n\r\n        <PageTittle \r\n          tittle='Movies'\r\n          subtittle=\"Now Playing\"\r\n        />\r\n\r\n        <ImageSlide \r\n          data={this.state.nowPlaying}\r\n        />\r\n\r\n        <ContainerMovies\r\n          tittle='Movies'\r\n          subtittle='Popular'\r\n          data={this.state.popular}\r\n          button='See More'\r\n        />\r\n\r\n        <ContainerMovies\r\n          tittle='Movies'\r\n          subtittle='Up Coming'\r\n          data={this.state.upComing}\r\n          button='See More'\r\n        />\r\n\r\n        <ContainerMovies\r\n          tittle='Movies'\r\n          subtittle='Top Rated'\r\n          data={this.state.topRated}\r\n          button='See More'\r\n        />\r\n\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n\r\nexport default Home\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Movie extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Movie\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Result, Button } from \"antd\";\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <Result\r\n      status=\"404\"\r\n      title=\"404\"\r\n      subTitle=\"Sorry, the page you visited does not exist.\"\r\n      extra={<Button type=\"primary\">Back Home</Button>}\r\n    />\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React, { Component } from \"react\";\nimport TopNav from \"./components/header/TopNav\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport \"./App.scss\";\nimport Home from \"./View/Home/Home\";\nimport Movie from \"./View/Movie/Movie\";\nimport NotFound from \"./View/NotFound/NotFound\";\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <React.Fragment>\n          <TopNav />\n          <Switch>\n            <Route path=\"/\" component={Home} exact />\n            <Route path=\"/:movieId\" component={Movie} exact />\n            <Route component={NotFound} />\n          </Switch>\n        </React.Fragment>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}